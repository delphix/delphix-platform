#!/bin/bash
#
# Copyright (c) 2022 by Delphix. All rights reserved.
#

# 1. This script is applicable only for Upgrade scenarios in AWS deployments
# 2. The fix for DLPX-75209 shifts to use mac addresses instead of canonical network
# interface names. To handle this change for upgrades, we save a map from interface
# names to their mac addresses. Post reboot, this script will be called as part of
# the PreExecStart directive in systemd-networkd service.
# 3. The script takes the map and matches the keys with the existing interface names
# in the netplan file, and for each such match, replaces the interface name with the
# corresponding mac address stored in the map file

INTERFACE_TO_MACADDRESS_MAP_FILE="/etc/interface_to_macaddress_map.out"
DLPX_NETPLAN_FILE="/etc/netplan/10-delphix.yaml"
UPGRADE_PROPERTIES_FILE="/var/dlpx-update/upgrade.properties"

function die()
{
  echo "$(basename $0): $@" >&2
  exit 1
}

# We want to process the read the map file only when we reboot into the new version post upgrade.
# This reuires us to check for the following --
# 1. The existence of the map file, which is generated during upgrade processing on the source engine.
# 2. The existence of the upgrade.properties file under /var/dlpx-update.
# 3. The existence of the upgrade type "FULL" in the upgrade.properties file. The upgrade logic
#    reboots the engine only if the upgrade type is FULL.
if [[ -e "$INTERFACE_TO_MACADDRESS_MAP_FILE" && -e "$UPGRADE_PROPERTIES_FILE" ]] && \
      grep -e -q 'UPGRADE_TYPE=FULL' "$UPGRADE_PROPERTIES_FILE" ]]; then
  # save the existing netplan file before updating it, could be handy for debugging
  cur_timestamp=$(date +%y%m%d_%h%m%s)
  cp -p "$DLPX_NETPLAN_FILE" /var/tmp/"$DLPX_NETPLAN_FILE"_"$cur_timestamp"

  # Update the netplan file with MAC based interface names
  while IFS= read -r line; do
    ifname=$(echo $line | awk '{print $1}')
    macname=$(echo $line | awk '{print $2}')
    macname1="enx""$macname"
    echo "Modifying $ifname to $macname1 in the netplan file" >>/var/log/syslog 2>&1
    grep -n "$ifname" "$DLPX_NETPLAN_FILE" || die "Did not find $ifname in netplan file"
    sed -i "s/$ifname/$macname1/g" "$DLPX_NETPLAN_FILE" || \
      die "Could not modify $ifname to $macname in the netplan file"
  done < "$INTERFACE_TO_MACADDRESS_MAP_FILE"
  echo "Updated all entries from interface names to mac addresses" >>/var/log/syslog 2>&1

  # After updating the netplan file, we must call "netplan generate" to generate new link files under
  # /run/systemd/network which will be consumed by the systemd-networkd to bring up the network interfaces
  netplan generate || die "Failed to run netplan generate command"

  # prevent conversion attempts on subsequent reboots
  rm "$INTERFACE_TO_MACADDRESS_MAP_FILE" || die "Failed to remove the $INTERFACE_TO_MACADDRESS_MAP_FILE file"
fi
