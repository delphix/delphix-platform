#!/bin/bash
#
# Copyright 2019 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

MIGRATE_CONFIG_SCRIPT="/opt/delphix/migration/migrate_config.py"
MIGRATE_CONFIG_LOG="/var/delphix/migration/log"
PG_REINDEX=/var/delphix/server/db/force-reindex
MGMT_SERVICE_OVERRIDE="/run/systemd/system/delphix-mgmt.service.d/override.conf"
POSTGRES_SERVICE_OVERRIDE="/run/systemd/system/delphix-postgres@default.service.d/override.conf"
CLEAR_SHARENFS="/var/lib/delphix-platform/clear-sharenfs"
PLATFORM_TYPE=$(cat /var/lib/delphix-appliance/platform)

# shellcheck disable=SC1091
. /opt/delphix/server/bin/upgrade/dx_upg_stress_options --source

#
# The perform-migration flag file is created by dx_execute prior rebooting
# into Linux.
#
PERFORM_MIGRATION="/var/delphix/migration/perform-migration"

function die() {
	echo "$(basename "$0"): $*" >&2
	exit 1
}

#
# Perform first-boot migration steps.
# This function must be idempotent. If some of the steps fail, we must
# be able to manually fix the problem, then re-run the migration service
# to resume the upgrade.
#
function perform_migration() {
	__trigger_unset_stress_option \
		"STRESS_MIGRATION_FAIL_BEGIN_MIGRATION_SERVICE"

	__trigger_unset_stress_option \
		"STRESS_MIGRATION_FAIL_BEFORE_MIGRATE_CONFIG"

	echo "$(date): Running migrate_config post-upgrade" \
		>>"$MIGRATE_CONFIG_LOG"
	"$MIGRATE_CONFIG_SCRIPT" post-upgrade >>"$MIGRATE_CONFIG_LOG" 2>&1 ||
		die "Failed migrate_config post-upgrade, see" \
			"$MIGRATE_CONFIG_LOG"

	__trigger_unset_stress_option \
		"STRESS_MIGRATION_FAIL_AFTER_MIGRATE_CONFIG"

	echo "chown -R /var/delphix/server"
	chown -R root:root /var/delphix/server ||
		die "Failed to chown /var/delphix/server"

	CRASHDUMP_USED="$(zfs get -Hpo value used rpool/crashdump)"
	CRASHDUMP_QUOTA="$(echo "$(zpool list -Hpo size rpool) / 2" | bc)"
	if [[ "$CRASHDUMP_USED" -lt "$CRASHDUMP_QUOTA" ]]; then
		echo "zfs set quota=${CRASHDUMP_QUOTA}b rpool/crashdump"
		zfs set quota="${CRASHDUMP_QUOTA}b" rpool/crashdump ||
			die "Failed to set quota on rpool/crashdump;" \
				"used ($CRASHDUMP_USED)," \
				"target quota ($CRASHDUMP_QUOTA)"
	else
		echo "note: rpool/crashdump used ($CRASHDUMP_USED) >=" \
			"target quota ($CRASHDUMP_QUOTA)"
	fi

	if [[ -d /var/delphix/dmsuite ]]; then
		echo "moving /var/delphix/dmsuite to /var/delphix/masking"
		mv -T /var/delphix/dmsuite /var/delphix/masking ||
			die "Failed to move masking data directory"
	else
		echo "note: /var/delphix/dmsuite doesn't exist"
	fi

	if [[ -d /var/delphix/masking ]]; then
		echo "chown -R /var/delphix/masking"
		chown -R masking:staff /var/delphix/masking ||
			die "Failed to chown masking data directory"
	fi

	__trigger_unset_stress_option \
		"STRESS_MIGRATION_FAIL_BEFORE_DOMAIN0_IMPORT"

	if zpool list domain0 >/dev/null 2>&1; then
		echo "note: domain0 is already imported"
	else
		echo "importing domain0"
		#
		# In most cases, use the devices' by-id links to import
		# domain0. This ensures persistent vdev names which can
		# tolerate device reordering. AWS does not provide a by-id
		# link, so we use simple device names (i.e. /dev/xvda). On
		# Azure, however, we use the Azure-specific links, because the
		# by-id links can change when the device is resized.
		#
		BY_ID_LINK="/dev/disk/by-id"
		AZURE_LINK="/dev/disk/azure"
		if [[ "$PLATFORM_TYPE" == "azure" && -d "$AZURE_LINK" ]]; then
			dir_array=()
			while read -r dir; do
				dir_array+=(-d)
				dir_array+=("$dir")
			done < <(find "$AZURE_LINK" -maxdepth 1 -name "scsi*")
			echo "zpool import -fN ${dir_array[*]} domain0"
			zpool import -fN "${dir_array[@]}" domain0 ||
				die "Failed to import domain0 by azure link"
		elif [[ "$PLATFORM_TYPE" != "aws" && -d "$BY_ID_LINK" ]]; then
			echo "zpool import -fN -d $BY_ID_LINK domain0"
			zpool import -fN -d $BY_ID_LINK domain0 ||
				die "Failed to import domain0 by-id"
		else
			echo "zpool import -fN domain0"
			zpool import -fN domain0 ||
				die "Failed to import domain0"
		fi
	fi
	__trigger_unset_stress_option \
		"STRESS_MIGRATION_FAIL_AFTER_DOMAIN0_IMPORT"

	#
	# The ashift value was stored as a user property on the domain0
	# dataset so must wait till the pool is imported to read it.
	# If the value of dlpx:ashift is "-" or "0" then we skip setting
	# the ashift property. Otherwise, we set the pool-wide ashift
	# property to the ashift value that was uses prior to migration.
	# We always remove the user property we set on domain0.
	#
	ashift=$(zfs get -Ho value dlpx:ashift domain0)
	if [[ "$ashift" != "-"  && "$ashift" != "0" ]]; then
		echo "setting ashift value to $ashift"
		zpool set ashift=$ashift domain0 ||
			die "Failed to set ashift value on domain0"
	fi
	zfs inherit dlpx:ashift domain0

	#
	# Note that we must mount the ZFS datasets before clearing sharenfs
	# as calling after sometimes fails (see DLPX-66005 for more info).
	#
	echo "mounting ZFS file-systems"
	zfs mount -a || die "Failed to mount zfs file-systems"

	__trigger_unset_stress_option \
		"STRESS_MIGRATION_FAIL_AFTER_ZFS_MOUNT"

	#
	# sharenfs is set when a dataset (VDB/dSource) is shared and is
	# cleared when it is stopped or quiesced. At this point in time,
	# this property will only be set for datasets that failed to be
	# quiesced before the upgrade reboot. The sharenfs setting was
	# set on Illumos with options specific to Illumos and targetting
	# an NFS version that may be different on Linux. As such, attempting
	# to migrate it could result in unexpected behaviour, so we clear
	# it instead. We rely on the user to manually restart any VDBs that
	# failed to quiesce.
	#
	echo "clearing sharenfs properties"
	"$CLEAR_SHARENFS" || die "failed to clear sharenfs properties"

	#
	# domain0/mds is owned by delphix:staff on Illumos, and on Linux
	# postgres can't access this dataset anymore. We change the
	# permissions to the Linux defaults.
	#
	echo "chown -R /mds"
	chown -R postgres:postgres /mds ||
		die "Failed chowning /mds"

	#
	# For each domain0 dataset with a default mountpoint,
	# the parents need other-execute for NFSv4 exports.
	#
	echo "Fixing mountpoint permissions for domain0 datasets"
	DATASETS=$(zfs list -H -r -t filesystem -o mountpoint domain0 |
		grep ^/domain0/ | xargs dirname | sort | uniq)

	for DATASET in $DATASETS; do
		if [[ "$DATASET" == "/domain0" ]]; then
			continue
		fi
		PERMS=$(stat "$DATASET" -c %a 2>/dev/null)
		RETURN=$?
		if [[ $RETURN -eq 0 && "$PERMS" == "750" ]]; then
			echo "chmod o+x $DATASET"
			chmod o+x "$DATASET" ||
				die "Failed chmod o+x $DATASET"
		fi
	done

	__trigger_unset_stress_option \
		"STRESS_MIGRATION_FAIL_AFTER_MOUNT_PERMISSION_FIX"

	#
	# Wait on zvol dev links to be ready.
	# This must be done after we import domain0 and before we attempt
	# to start the rtslib-fb-targetctl service, which depends on the
	# current service.
	#
	zvol_wait || die "Failed waiting on zvol dev links."

	#
	# DLPX-63949: Postgres must be re-indexed after migration.
	# See dx_pg_post_start.sh for more info.
	#
	touch "$PG_REINDEX" || die "Failed to create $PG_REINDEX"
	chown postgres "$PG_REINDEX" || die "Failed to chown $PG_REINDEX"

	#
	# Since re-indexing can take a long time, we increase the timeout
	# for the postgres service. We also prevent the service from restarting
	# on failure since if re-indexing takes unusually long and still times
	# out, we do not want to keep re-trying and timing out again. Those
	# settings are temporary and are reverted when migration completes.
	#
	mkdir -p "$(dirname "$POSTGRES_SERVICE_OVERRIDE")" ||
		die "Failed to create dir $(dirname "$POSTGRES_SERVICE_OVERRIDE")"
	cat <<-EOF >"$POSTGRES_SERVICE_OVERRIDE" ||
		#
		# Set temporarily by delphix-migration service.
		#
		[Service]
		Restart=no
		TimeoutSec=3600
	EOF
		die "Failed to create delphix-postgres.service override file."

	#
	# Similarly, prevent the mgmt service from restarting on failure for
	# the duration of migration as this makes debugging and migration
	# stress testing harder.
	#
	mkdir -p "$(dirname "$MGMT_SERVICE_OVERRIDE")" ||
		die "Failed to create dir $(dirname "$MGMT_SERVICE_OVERRIDE")"
	cat <<-EOF >"$MGMT_SERVICE_OVERRIDE" ||
		#
		# Set temporarily by delphix-migration service.
		#
		[Service]
		Restart=no
	EOF
		die "Failed to create delphix-mgmt.service override file."

	#
	# Notify systemd of the new service override files.
	#
	systemctl daemon-reload || die "daemon-reload failed"

	rm "$PERFORM_MIGRATION" || die "Failed to remove $PERFORM_MIGRATION"
}

if [[ -f "$PERFORM_MIGRATION" ]]; then
	echo "File $PERFORM_MIGRATION exists. Performing OS migration ..."
	perform_migration
	echo "OS migration completed"
else
	echo "File $PERFORM_MIGRATION missing. Nothing to do."
fi
