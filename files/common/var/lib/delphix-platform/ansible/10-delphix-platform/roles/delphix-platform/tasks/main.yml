#
# Copyright 2018, 2023 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

---
#
# We use a non-standard directory for the appliance user's home
# directory. As a result, we have to explicitly create the "base
# directory" here, rather than rely on Ansible's user module to create
# it below; otherwise that task will fail.
#
- file:
    path: /home
    state: directory
    mode: 0755

- user:
    name: delphix
    uid: 65433
    group: staff
    groups: root
    append: true
    shell: /bin/bash
    create_home: yes
    comment: Delphix User
    home: /home/delphix

#
# When it's an upgrade in that case the home dateset
# is required to be mounted on mount point /home
# from the old mount point /export/home
#
- command: mount
  register: mount_home
  ignore_errors: True
- set_fact:
    export_home: "{{ mount_home.stdout | regex_search(export_home_regex, multiline=True)}}"
  vars:
    export_home_regex: "rpool/ROOT/delphix.[a-zA-Z0-9]+/home on /export/home"
- debug: msg={{ export_home }}
- replace:
    path: /etc/fstab
    regexp: '/export/home'
    replace: '/home'
  when: export_home | length > 0

#
# In order for this locale to be used (e.g. by virtualization) we need
# to ensure it's available. Generally this locale will be generated by
# appliance-build for new VMs, but we can't rely on that since that
# doesn't work for not-in-place upgrades. Thus, we must explicitly
# generate the locale here.
#
- locale_gen:
    name: en_US.UTF-8
    state: present

#
# If we don't disable the "OS prober" script, when we update the grub
# configuration, it may find OS installations that we don't want. For
# example, when updating grub from within the chroot environment, it may
# find the OS installed on the build server's disks, since we bind mount
# the host's /dev directory into the chroot environment. By disabling
# the "OS prober" script, we avoid this issue.
#
- file:
    path: /etc/grub.d/30_os-prober
    mode: 0644

#
# Create a world writeable directory for application and kernel core
# dumps. We want it world writeable because we're sharing one directory
# for core files from any user. Unlike illumos where all application
# cores are written out as the root user, linux cores are written with
# the UID of the running process. Also, we are setting the sticky bit on
# this directory to prevent users from removing each other's files.
#
- file:
    path: /var/crash
    state: directory
    mode: 01777

#
# Restrict cron permissions. All jobs are owned by root so there's no
# reason to allow others any level of access. This is also necessary to
# satisfy external auditing of CIS security benchmarks. Also ensuring
# the permissions on /etc/ssh/sshd_config are configured.
#
- file:
    path: "{{ item }}"
    state: file
    mode: 0600
  with_items:
    - /etc/crontab
    - /etc/ssh/sshd_config

- file:
    path: "{{ item }}"
    state: directory
    mode: 0700
  with_items:
    - /etc/cron.d
    - /etc/cron.hourly
    - /etc/cron.daily
    - /etc/cron.weekly
    - /etc/cron.monthly

#
# Create the directory and ZFS dataset that we'll use to store unpacked
# upgrade images. This directory is used by the upgrade related scripts
# found in this directory, but also used by upgrade-scripts stored in
# the appliace-build repository (which generates the upgrade image).
# Thus, we need to be careful if/when changing this, as we'll need to
# coordinate the change with the appliance-build upgrade-scripts.
#
- file:
    path: /var/dlpx-update
    state: directory

#
# The zfs module cannot be run from the chroot environment that's used
# by appliance-build. Thus, we disable this when run in that context by
# only running this when ansible_is_chroot is not true.
#
- zfs:
    name: rpool/update
    state: present
    extra_zfs_properties:
      mountpoint: /var/dlpx-update
      compression: gzip
      quota: 30g
  when: not ansible_is_chroot

#
# Create the directory and ZFS dataset that we'll use to store upgrade
# related logs (that need to be shared across versions). This directory is
# used  part of upgrade verify and rollback process to share log files to
# older version. Thus, we need to be careful if/when changing this, as we'll
# need to coordinate the change with the appliance-build upgrade-scripts.
#
- file:
    path: /var/tmp/delphix-upgrade
    state: directory

- zfs:
    name: rpool/upgrade-logs
    state: present
    extra_zfs_properties:
      mountpoint: /var/tmp/delphix-upgrade
      compression: gzip
  when: not ansible_is_chroot

#
# Configure command audit logging
#
# We want to record all commands executed on the appliance. Opt out for
# setsid since all ExecuteUtils.execute wrap each call with setsid.
#
- lineinfile:
    path: /etc/audit/auditd.conf
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
  with_items:
    - { regex: "^num_logs =", line: "num_logs = 6" }
    - { regex: "^max_log_file =", line: "max_log_file = 3072" }
    - { regex: "^max_log_file_action =", line: "max_log_file_action = rotate" }
    - { regex: "^log_format =", line: "log_format = RAW" }

- blockinfile:
    path: /etc/audit/rules.d/audit.rules
    insertafter: EOF
    block: |
      ## Record all executed commands (excluding setsid)
      -a exit,never -S execve -F exe=/usr/bin/setsid
      -a exit,always -S execve

      ## Record command exit failures (execve result is not command result)
      -a exit,always -F a0!=0 -S exit_group
      -a exit,always -F a0!=0 -S exit

#
# Prevent auditd output from being duplicated into the journal. The size
# of the journal is limited and the high volume of messages from auditd
# would end up causing important messages from less verbose services to
# be flushed and lost prematurely.
#
- command: systemctl mask systemd-journald-audit.socket

#
# Create directory to store logs of all terminal activity by delphix
# super users. These logs can be retrieved via a customer-facing API
# for auditing purposes.
#
- file:
    path: /var/delphix/log/session-logs
    state: directory
    owner: delphix
    group: staff
    mode: 0700
    recurse: yes

#
# If the task above had to create the "/var/delphix" directory, the
# permissions will not be correct, so we fix the permissions here.
#
- file:
    path: /var/delphix
    state: directory
    owner: root
    group: root
    mode: 0775

#
# The nfs-blkmap.service is disabled by default but since it is wanted
# by nfs-client.target it will always get started.  We don't use pNFS
# so mask the nfs-blkmap.service to keep it from running.
#
- command: systemctl mask nfs-blkmap.service

#
# By default, the ulimit for core files is set to 0, and the default
# filename and location for a core file is 'core' in the cwd. Update
# limits.conf to allow processes running as root or a regular user to
# make core files.
#
- lineinfile:
    create: yes
    path: /etc/security/limits.conf
    line: "{{ item }} soft core unlimited"
  with_items:
    - 'root'
    - '*'

- lineinfile:
    create: yes
    path: /etc/security/limits.conf
    line: "{{ item }} soft nofile 32768"
  with_items:
    - 'delphix'
    - 'root'

#
# The 'ClientAliveInterval' setting determines the amount of time
# (in seconds) the sshd server will wait to receive data from the
# client before sending a request for response.
#
- set_fact:
    ssh_client_alive_interval: "300"
    ssh_client_alive_count_max: "3"

#
# With that said (see comment above), the Azure marketplace does not
# allow a value greater than 3 minutes. So, when running on Azure, we
# use 3 minutes.
#
- set_fact:
    ssh_client_alive_interval: "180"
    ssh_client_alive_count_max: "0"
  when:
    - platform == "azure"

- lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?{{ item.key }} "
    line: "{{ item.key }} {{ item.value }}"
  with_items:
    #
    # Configure SSH to allow PAM "conversations" (interactions with the user).
    #
    - { key: "ChallengeResponseAuthentication", value: "yes" }
    #
    # Harden the appliance by disabling ssh-agent(1), tcp, UNIX domain, and
    # X11 forwarding. Note that this doesn't improve security unless users are
    # also denied shell access.
    #
    - { key: "AllowAgentForwarding", value: "no" }
    - { key: "AllowStreamLocalForwarding", value: "no" }
    - { key: "AllowTcpForwarding", value: "no" }
    - { key: "Ciphers", value: "chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com" }
    - { key: "ClientAliveCountMax", value: "{{ ssh_client_alive_count_max }}" }
    - { key: "ClientAliveInterval", value: "{{ ssh_client_alive_interval }}" }
    - { key: "HostKeyAlgorithms", value: "-ssh-rsa*" }
    - { key: "KexAlgorithms", value: "curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256"}
    - { key: "LoginGraceTime", value: "60"}
    - { key: "MACs", value: "umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512"}
    - { key: "MaxAuthTries", value: "4" }
    - { key: "MaxStartups", value: "10:30:60"}
    - { key: "PermitRootLogin", value: "no" }
    - { key: "X11Forwarding", value: "no" }
  notify: "sshd config changed"

- blockinfile:
    path: /etc/profile
    insertafter: EOF
    block: |
      # Set a 5 minute idle timeout for all shells. After prompting for input
      # this timeout timer begins.
      TMOUT=300
      readonly TMOUT
      export TMOUT
  when:
    #
    # For developer convenience, we only enable the shell timeout
    # for external variants. The idle timeout can be a burden when we
    # need to run long running processes over SSH on our internal
    # systems (e.g. for development, testing, etc).
    #
    - variant is regex("external-.*")
#
# Harden the appliance by disabling SFTP on external variants.
#
- replace:
    path: /etc/ssh/sshd_config
    regexp: '^(Subsystem.*sftp.*)'
    replace: '#\1'
  when:
    #
    # Disable sftp on external variants and leave it enabled on internal
    # variants for developer convenience and to facilitate test automation.
    #
    - variant is regex("external-.*")

#
# Ssh leads to the CLI, not bash, so let's remove all the linuxy shell goodies,
# like last-login, "welcome to ubuntu", and help messages. This makes linux and
# illumos look the same, too.
#
- replace:
    dest: /etc/ssh/sshd_config
    regexp: '^#?[\s]*PrintLastLog.*$'
    replace: 'PrintLastLog no'
- replace:
    dest: /etc/pam.d/sshd
    regexp: '^(session[\s]+optional[\s]+pam_motd\.so.*)$'
    replace: '#\1'

#
# Restrict su access to users that are part of the root group (gid 0).
# On a Delphix engine, this is restricted to the delphix user.
#
- replace:
    dest: /etc/pam.d/su
    regexp: '^#?[\s]*(auth[\s]+required[\s]+pam_wheel\.so.*)$'
    replace: '\1'

#
# Enable SNMP client tools to load MIBs by default.
#
- replace:
    path: /etc/snmp/snmp.conf
    regexp: '^(mibs\s+:\s+)'
    replace: '#\1'

- lineinfile:
    path: /etc/environment
    regexp: '^{{ item.key }}='
    line: '{{ item.key }}="{{ item.value }}"'
  with_items:
    - { key: 'JAVA_HOME', value: '/usr/lib/jvm/adoptopenjdk-java8-jdk-amd64' }

#
# Configure the Azure agent. Only run this on Azure, since that is the
# only platform that has the Azure agent installed.
#
- lineinfile:
    path: /etc/waagent.conf
    regexp: '^{{ item.key }}='
    line: '{{ item.key }}={{ item.value }}'
  with_items:
    #
    # We use cloud-init rather than the Azure agent to handle any
    # provisioning logic that we need.
    #
    - { key: 'Provisioning.Enabled', value: 'n' }
    #
    # Even though we do use cloud-init to handle some provisioning
    # tasks, we should tell the Azure agent that we don't. Otherwise,
    # the Azure agent will wait for cloud-init to complete before
    # reporting back to Azure that the VM is running. The way it detects
    # that cloud-init has finished is by waiting for cloud-init to copy
    # a certain file (ovf-env.xml) into /var/lib/waagent/, but
    # cloud-init won't copy this file unless it has been configured to
    # read Azure userdata (as determined by the 'datasource_list'
    # parameter). We do not allow the appliance to read userdata from
    # any source, at least on the external variant, with the result that
    # the agent waits 20+ minutes before timing out and finally
    # reporting the VM as running.
    #
    - { key: 'Provisioning.UseCloudInit', value: 'n' }
    #
    # Prevent customers from running arbitrary code on the engine via
    # extensions when they deploy.
    #
    - { key: 'Extensions.Enabled', value: 'n' }
    #
    # This controls auto-updating of the extension handler (not the
    # provisioning handler or daemon). It seems safer to disable this
    # rather than to allow Microsoft to push new code to our engines,
    # especially since we aren't using any extensions.
    #
    - { key: 'AutoUpdate.Enabled', value: 'n' }
    #
    # This controls how the resource disk is provisioned. We don't
    # currently use this disk so don't enable swap or format it.
    #
    - { key: 'ResourceDisk.Format', value: 'n' }
    - { key: 'ResourceDisk.EnableSwap', value: 'n' }
  when: platform == "azure"

#
# Customize the GCP linux environment. We remove any old template
# and configuration files if they exist.
#
- file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/default/instance_configs.cfg.template
    - /etc/default/instance_configs.cfg

- blockinfile:
    path: /etc/default/instance_configs.cfg
    create: yes
    block: |
      #
      # Disable the accounts daemon to prevent adding/removing
      # users on the engine.
      #
      [Daemons]
      accounts_daemon = false

      #
      # Disable user supplied startup/shutdown scripts from running on
      # the engine.
      #
      [MetadataScripts]
      shutdown = false
      startup = false
  when:
    - platform == "gcp"
  notify: "gcp config changed"

#
# We want the ssh service to start as early as possible during boot up,
# so we explicitly remove all dependencies of the service here. We've
# configured the service not to use the "default" dependencies, via the
# "override.conf" file in the delphix-platform package. Unfortuantely
# though, we can't remove any dependencies specified using "After=" in
# the original SSH service file, by using that same "override.conf"
# file. Thus, to remove the "After=" dependencies, we have to create a
# completely new unit definition for the SSH service, that will override
# the original unit definition; Systemd allows us to use files in
# "/etc/systemd" to replace files in "/lib/systemd".
#
# So, the strategy here is to copy the original unit definition from
# "/lib/systemd" (the file is provided by the SSH package) to
# "/etc/systemd", and then modify the copy to remove the "After=" line.
# This way, if the original unit definitation is changed on upgrade,
# we'll automatically use the new file from the new package; but we'll
# still be able to modify the file to remove the "After=" dependencies.
# Additionally, we don't modify the file in "/lib/systemd" directly, so
# that we don't break "debsums -c", and it's easy to "revert" our
# changes by simply removing our copy in "/etc/systemd".
#
- copy:
    remote_src: yes
    src: /lib/systemd/system/ssh.service
    dest: /etc/systemd/system/ssh.service
    owner: root
    group: root
    mode: 0644

- lineinfile:
    path: /etc/systemd/system/ssh.service
    regexp: "^After="
    state: absent

#
# In addition to removing the SSH service dependencies (done above), we
# also want to disable pam_nologin. Otherwise, SSH will come up quickly,
# but we won't be able to log in immediately, due to pam_nologin.
#
- lineinfile:
    dest: '/etc/pam.d/{{ item }}'
    regexp: '^#?(.*)(pam_nologin.so)(.*)$'
    line: '#\1\2\3'
    backrefs: yes
    state: present
  with_items:
    - login
    - sshd

#
# On Xen, block devices, including cdroms, are named with the scheme /dev/xvdX.
# Thus, the udev rules for cdroms are written to match devices with that naming
# scheme. These rules cause 'cdrom_id' to run, and when it does, it opens the
# device with the O_EXCL flag. On rare occasions, 'zpool create' will be
# attempting to label the same device at the same time. 'zpool' also uses O_EXCL
# when it tries to open the device, so its attempt will fail with EBUSY.
#
# This removes 'xvd*' from the list of matching names in 60-cdrom_id.rules by
# overriding the original version of the file in /lib/ with a modified one in
# /etc/.
#
- copy:
    remote_src: yes
    src: /lib/udev/rules.d/60-cdrom_id.rules
    dest: /etc/udev/rules.d/60-cdrom_id.rules
    owner: root
    group: root
    mode: 0644
- lineinfile:
    path: /etc/udev/rules.d/60-cdrom_id.rules
    backrefs: yes
    regexp: '(.*)\|xvd\*(.*)'
    line: '\1\2'

#
# The default udev rules create two different by-id links for each storage
# device on ESX, based the same serial number but with different prefixes.
# The first is based on the bus type (scsi) and the second is a catch-all
# "World Wide Name" (wwn). After migration, we import domain0 with the
# "/dev/disk/by-id" path, but since udev runs asynchronously, we may end up
# with a mix of wwn and scsi aliases. This causes problems when the DE tries to
# match devices on the system to those in the pool, i.e. for removal.
#
# This moves the wwn links to the /dev/disk/by-id/wwn sub-directory, keeping it
# available as a backup but limiting the /dev/disk/by-id namespace to one type
# of id. We override the original rules in /lib/ with our new version in /etc/.
#
- copy:
    remote_src: yes
    src: /lib/udev/rules.d/60-persistent-storage.rules
    dest: /etc/udev/rules.d/60-persistent-storage.rules
    owner: root
    group: root
    mode: 0644
- replace:
    path: /etc/udev/rules.d/60-persistent-storage.rules
    regexp: 'disk\/by-id\/wwn-'
    replace: 'disk/by-id/wwn/'

#
# The default udev persistent storage rule will call 'blkid' on every
# device except sr devices.  This can be very expensive when running
# on a system with lots of zvols and can result in udev event storms
# that can last hours. This will override the default rule and skip this
# call on zvols.
#
- lineinfile:
    path: /etc/udev/rules.d/60-persistent-storage.rules
    backrefs: yes
    regexp: '(KERNEL!="sr\*)\"(.*)'
    line: '\1|zd*"\2'
  notify: "udev config changed"

#
# Enable CRA for external variants
#
- command: pam-auth-update {{ item }}
  with_items:
  - --enable challenge-response
  - --remove unix
  when:
    - variant is regex("external-.*")

#
# Increase login timeout to give support more time to interact with CRA via the console.
#
- lineinfile:
    path: /etc/login.defs
    regexp: '^LOGIN_TIMEOUT[\t ]*\d*$'
    line: 'LOGIN_TIMEOUT    300'

#
# MAKEDUMP_ARGS - Configure makedumpfile to:
#       [1] Compress the dump (-c)
#       [2] Filter out pages that are zero, in the page or private cache,
#           part of user data, or marked as freed (-d 31)
#       [3] Output a progress indicator, common and error messages, and
#           a report summary message (--message-level 23)
#       [4] Exclude ZFS ARC file data pages
#           (--private-page-filter 0x2F5ABDF11ECAC4E)
#       * see man page makedumpfile(8) for more info
#
# KDUMP_CMDLINE_APPEND - We first append the default parameters passed
#       by the kdump-tools package:
#       [1] Force drivers to reset the underlying device during
#           initialization (reset_devices)
#       [2] Run the kdump-tools-dump service that will invoke
#           makedumpfile (systemd.unit=kdump-tools-dump.service)
#       [3] We don't intend to use multithreaded programs in the
#           crash kernel, so in order to save some memory we specify
#           the number of CPUs to be 1 (nr_cpus=1)
#       [4] Reduce driver initialization failures due to shared
#           interrupts in the crash kernel by searching all
#           handlers when an interrupt is not handled (irqpoll)
#       [5] Disable the USB subsystem as we won't be needing it
#           (nousb)
#       [6] Allow the standard Linux storage driver to function
#           when running on Hyper-V, otherwise kexec'ing a new
#           kernel doesn't work (ata_piix.prefer_ms_hyperv=0)
#           See the following link for more info:
#           https://support.microsoft.com/ca-es/help/2858695
#
#       Then we go ahead and append our own options on top of the
#       defaults:
#       [1] If the crash-kernel panics too we don't want to be
#           stuck there forever. Ensure we reboot when that
#           happens after 10 seconds (panic=10)
#
#       * all of the above can be found in
#         Documentation/admin-guide/kernel-parameters.txt and
#         Documentation/kdump/kdump.txt of the Linux Kernel repo.
#
- lineinfile:
    path: /etc/default/kdump-tools
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
  with_items:
    - regex: '^#?MAKEDUMP_ARGS='
      line: 'MAKEDUMP_ARGS="-c -d 31 --message-level 23 --private-page-filter 0x2F5ABDF11ECAC4E"'
    - regex: '^#?KDUMP_CMDLINE_APPEND='
      line: 'KDUMP_CMDLINE_APPEND="reset_devices systemd.unit=kdump-tools-dump.service nr_cpus=1 irqpoll nousb ata_piix.prefer_ms_hyperv=0 panic=10"'

#
# Disable all motd scripts except for those provided by Delphix by removing
# executable permissions on every script in /etc/update-motd.d except those
# that have "-delphix" in their filename.
#
- find:
    paths: /etc/update-motd.d
    excludes: '*-delphix*'
  register: motd_files

- file:
    path: "{{ item.path }}"
    mode: 0644
  with_items: '{{ motd_files.files }}'

#
# The vmtoolsd daemon provides a wealth of information about the guest VM to
# the host, and a lot of that information is superfluous. For example, the list
# of filesystems mounted in the guest, or the list of processes running inside
# the guest. Not only is this information superfluous to the VMware admin,
# obtaining that information on a very large VM takes up precious CPU time. For
# example, the list of disks and filesystems is by default obtained every 30
# seconds, and when doing that, vmtoolsd does a statfs and lstat of every
# single filesystem and mountpoint. On a Delphix Engine with tens-of-thousands
# of timeflows, this is a large amount of churn.
#
# We disable the plugins responsible for this superfluous churn here.
#
- blockinfile:
    path: /etc/vmware-tools/tools.conf
    block: |
      [guestinfo]
      # Set to true to disable DiskInfo.
      disable-query-diskinfo=true

      [appinfo]
      # Set to true to disable the appinfo plugin.
      disabled=true

      [servicediscovery]
      # Set to true to disable the servicediscovery plugin.
      disabled=true
  when:
    - platform == "vmware"
  notify: "vmware-tools config changed"

#
# In a prior release, the "ubuntu-advantage-tools" package may have
# dynamically generated this file as part of its "postinst" package
# hook. This file can result in upgrade problems, so we ensure it's
# absent. We can't rely on the file being automatically removed, because
# it was dynamically generated, and thus not removed by the package
# manager when the package is removed.
#
- file:
    path: "/etc/apt/sources.list.d/ubuntu-esm-infra.list"
    state: absent

- include_tasks: buildserver.yml
  when:
    - variant == "internal-buildserver"
    - not ansible_is_chroot

- name: Add systemctl bash completion
  copy:
    dest: "/etc/bash_completion.d/systemctl"
    content: |
      if [[ -r /usr/share/bash-completion/completions/systemctl ]]; then
        . /usr/share/bash-completion/completions/systemctl && complete -F _systemctl systemctl
      fi

- name: Source bash completion
  blockinfile:
    dest: "/home/delphix/.bashrc"
    block: |
      . /etc/bash_completion.d/systemctl
      . /etc/bash_completion.d/zfs
      PATH=$PATH:/opt/delphix/server/bin

#
# CIS: Set default umask (DLPX-87205)
# We need to set default umask as 027 in the /etc/bash.bashrc file,
# so that the same can be applied for all the users on the engine.
#
- blockinfile:
    path: /etc/bash.bashrc
    block: |
      # Set default umask value.
      umask 027

- service:
    name: "nullmailer"
    state: "stopped"
  when: not ansible_is_chroot

#
# The presence of the auto_home is an issue
# because this is also mounted on /home so
# we need to remove this.
#

- lineinfile:
    path: /etc/auto.master
    line: "/home   auto_home    -nobrowse"
    state: absent
