#!/bin/bash

POST_MIGRATION_CLEANUP=/var/delphix/migration/post-migration-cleanup-required
FINAL_ILLUMOS_CLEANUP=/var/delphix/migration/final-illumos-cleanup-required

function die() {
	echo "$(basename "$0"): $*" >&2
	exit 1
}

function echo_err() {
	echo "$(basename "$0"): $*" >&2
}

function usage() {
	echo "$(basename "$0"): $*" >&2
	echo "Usage: $(basename "$0") post-migration"
	echo "       $(basename "$0") final"
	exit 2
}

function destroy_dataset() {
	local dataset="$1"

	if zfs list "$dataset" &>/dev/null; then
		if zfs destroy "$dataset"; then
			echo "Destroyed '$dataset'"
		else
			echo_err "Failed to destroy '$dataset'"
			return 1
		fi
	fi
}

function destroy_dataset_recursive() {
	local dataset="$1"

	if zfs list "$dataset" &>/dev/null; then
		if zfs destroy -r "$dataset"; then
			echo "Destroyed '$dataset' recursively"
		else
			echo_err "Failed to destroy '$dataset' recursively"
			return 1
		fi
	fi
}

function promote_dataset() {
	local dataset="$1"
	local origin

	#
	# To promote a dataset all the way to the top, zfs promote may need
	# to be called multiple times if the dataset is a nested clone.
	# In practice though, since we delete old os versions, the clone
	# depth shouldn't go deeper than 2 or 3 levels.
	#
	for _ in {1..5}; do
		if ! origin=$(zfs get -H -o value origin "$dataset"); then
			echo_err "Failed to get origin of '$dataset'"
			return 1
		fi
		if [[ "$origin" == "-" ]]; then
			echo "Promoted '$dataset'"
			return 0
		else
			if ! zfs promote "$dataset"; then
				echo_err "Failed to promote '$dataset'"
				return 1
			fi
		fi
	done

	echo "Failed to promote '$dataset' to the top in 5 attempts"
	echo "Dataset's origin is '$origin'"

	return 1
}

#
# Once we pass the no-rollback point after a migration, we want to
# cleanup Illumos datasets that are not needed anymore.
#
function post_migration_cleanup() {
	local var_delphix
	local errors=false

	if [[ ! -f "$POST_MIGRATION_CLEANUP" ]]; then
		echo "Post-migration cleanup has already been performed."
		return 0
	fi

	var_delphix=$(zfs list -H -o name /var/delphix) ||
		die "Failed to get /var/delphix dataset"

	#
	# Clear the user-property generated by the Illumos installer
	#
	zfs inherit org.opensolaris.caiman:install rpool || errors=true

	#
	# Those datasets are cloned from Illumos datasets. We do not
	# want any dependencies on Illumos datasets remaining after
	# the migration.
	#
	promote_dataset rpool/illumos-home || errors=true
	promote_dataset "$var_delphix" || errors=true

	#
	# We do not need dump block devices on Linux.
	# We also do not currently support zvol swap devices on Linux.
	#
	destroy_dataset rpool/dump || errors=true
	destroy_dataset rpool/swap || errors=true
	destroy_dataset rpool/swap1 || errors=true

	#
	# Destroy temporary snapshots created for the duration of the
	# migration.
	#
	destroy_dataset domain0/mds@migration || errors=true

	#
	# Some directories still have the old delphix:staff permissions.
	# We want to convert those to the default Linux root:root.
	# For /var/delphix, we only need to chown the directory itself
	# since its contents should have been already chowned.
	#
	chown -R root: /var/dlpx-update /var/crash || errors=true
	chown root: /var/delphix || errors=true

	$errors && die "Some post-migration cleanup tasks have failed."

	touch "$FINAL_ILLUMOS_CLEANUP"
	rm "$POST_MIGRATION_CLEANUP"
	echo "Post-migration cleanup successful."
}

#
# We keep the old Illumos datasets around for debugging purposes until the
# first Linux-to-Linux upgrade.
#
function final_illumos_cleanup() {
	local var_delphix
	local errors=false

	if [[ -f "$POST_MIGRATION_CLEANUP" ]]; then
		die "Post-migration cleanup must be performed before the" \
			"final Illumos cleanup."
	fi

	if [[ ! -f "$FINAL_ILLUMOS_CLEANUP" ]]; then
		echo "Final Illumos cleanup has already been performed."
		return 0
	fi

	var_delphix=$(zfs list -H -o name /var/delphix) ||
		die "Failed to get /var/delphix dataset"

	destroy_dataset_recursive rpool/versions || errors=true
	destroy_dataset_recursive rpool/illumos-home || errors=true
	destroy_dataset "$var_delphix"@migration || errors=true

	$errors && die "Some final Illumos cleanup tasks have failed."

	rm "$FINAL_ILLUMOS_CLEANUP"
	echo "Final Illumos cleanup successful."
}

[[ $# -gt 1 ]] && usage "too many arguments specified"
[[ $# -eq 0 ]] && usage "too few arguments specified"

[[ "$EUID" -ne 0 ]] && die "must be run as root"

case "$1" in
post-migration)
	post_migration_cleanup
	;;
final)
	final_illumos_cleanup
	;;
*)
	usage "Invalid command '$1'"
	;;
esac
