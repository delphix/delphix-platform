#!/bin/bash
#
# Copyright 2019 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -o pipefail

UPDATE_DIR=${UPDATE_DIR:-/var/dlpx-update}

function die() {
	exit_code=$1
	# Use first argument as exit code, if provided.
	if [[ -z "${exit_code//[0-9]/}" ]]; then
		shift
	else
		exit_code=1
	fi
	echo "$(basename "$0"): $*" >&2
	exit ${exit_code}
}

function usage() {
	echo "$(basename "$0"): $*" >&2
	echo "Usage: $(basename "$0") [-s] <image> <property>"
	exit 2
}

function cleanup() {
	[[ -n "$UNPACK_DIR" ]] && [[ -d "$UNPACK_DIR" ]] && rm -rf "$UNPACK_DIR"
}

#
# This option will skip the signature verification portion of this
# script. Generally this should not be used, as the signature is used to
# ensure the image hasn't been modified, but it can be useful for
# development and/or testing purposes.
#
opt_s=""

while getopts ':s' c; do
	case "$c" in
	s) eval "opt_$c=true" ;;
	*) usage "illegal option -- $OPTARG" ;;
	esac
done
shift $((OPTIND - 1))

[[ $# -gt 2 ]] && usage "too many arguments specified"
[[ $# -lt 2 ]] && usage "too few arguments specified"

[[ "$EUID" -ne 0 ]] && die "must be run as root"
[[ -d "$UPDATE_DIR" ]] || die 11 "$UPDATE_DIR does not exist"

IMAGE="$1"
PROPERTY="$2"

case "$IMAGE" in
*.upgrade.tar) ;;
*) die 12 "The upgrade image must be a '.upgrade.tar' file" ;;
esac

UPGRADE_IMAGE_PATH="$(readlink -f "$IMAGE")"
[[ -n "$UPGRADE_IMAGE_PATH" ]] || die 13 "unable to determine upgrade image path"

trap cleanup EXIT

UNPACK_DIR=$(mktemp -d -p "$UPDATE_DIR" -t unpack.XXXXXXX)
[[ -d "$UNPACK_DIR" ]] || die "failed to create unpack directory '$UNPACK_DIR'"
pushd "$UNPACK_DIR" &>/dev/null || die "'pushd $UNPACK_DIR' failed"

DELPHIX_SIGNATURE_VERSION=$(/usr/bin/get-appliance-version --major)

tar -x SHA256SUMS SHA256SUMS.sig."$DELPHIX_SIGNATURE_VERSION" version.info -f "$UPGRADE_IMAGE_PATH" ||
	die 14 "failed to extract files from upgrade image '$UPGRADE_IMAGE_PATH'"

for file in SHA256SUMS SHA256SUMS.sig."$DELPHIX_SIGNATURE_VERSION" version.info; do
	[[ -f "$file" ]] || die 15 "image is corrupt; missing '$file' file"
done

if [[ -z "$opt_s" ]]; then
	openssl dgst -sha256 \
		-verify /var/lib/delphix-appliance/key-public.pem.upgrade."$DELPHIX_SIGNATURE_VERSION" \
		-signature SHA256SUMS.sig."$DELPHIX_SIGNATURE_VERSION" \
		SHA256SUMS >/dev/null ||
		die 16 "image is corrupt; verification of 'SHA256SUMS' file," \
			"using signature 'SHA256SUMS.sig.$DELPHIX_SIGNATURE_VERSION'" \
			"and key 'key-public.pem.upgrade.$DELPHIX_SIGNATURE_VERSION' failed"
fi

awk '$2 == "version.info" { print $0 }' SHA256SUMS |
	sha256sum --check --status ||
	die 17 "image is corrupt; checksums don't match"

grep "^$PROPERTY=" version.info | cut -d = -f 2- ||
	die "failed to get property '$PROPERTY'"

popd &>/dev/null || die "'popd' failed"

exit 0
