#!/bin/bash
#
# Copyright 2018, 2019 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

UPDATE_DIR=${UPDATE_DIR:-/var/dlpx-update}

function die() {
	echo "$(basename "$0"): $*" >&2
	exit 1
}

function usage() {
	echo "$(basename "$0"): $*" >&2
	echo "Usage: $(basename "$0") [-f] [-s] [-x] <image>"
	exit 2
}

function report_progress_inc() {
	echo "Progress increment: $(date +%T:%N%z), $1, $2"
}

function cleanup() {
	[[ -d "$UNPACK_DIR" ]] && rm -rf "$UNPACK_DIR"
}

#
# This option will "force" unpack the image, which will cause the image
# currently being unpacked to overwrite any previously unpacked image of
# the same version. Otherwise, this will fail if there's already an
# unpacked image of the same version.
#
opt_f=false

#
# This option will skip the signature verification portion of this
# script. Generally this should not be used, as the signature is used to
# ensure the image hasn't been modified, but it can be useful for
# development and/or testing purposes.
#
opt_s=false

#
# This option will cause this script to modify the "version.info" file,
# setting the "MINIMUM_REBOOT_OPTIONAL_VERSION" field to be equal to the
# "VERSION" field. This way, when an upgrade is performed using this
# unpacked upgrade image, it'll result in a "not-in-place" upgrade when
# perhaps this otherwise would not have occurred; this is mostly useful
# for internal testing of the "not-in-place" upgrade code paths.
#
opt_x=false

while getopts ':fsx' c; do
	case "$c" in
	f | s | x) eval "opt_$c=true" ;;
	*) usage "illegal option -- $OPTARG" ;;
	esac
done
shift $((OPTIND - 1))

[[ $# -gt 1 ]] && usage "too many arguments specified"
[[ $# -eq 0 ]] && usage "too few arguments specified"

[[ "$EUID" -ne 0 ]] && die "must be run as root"
[[ -d "$UPDATE_DIR" ]] || die "$UPDATE_DIR does not exist"

case "$1" in
*.upgrade.tar.gz) ;;
*) die "The upgrade image must be a '.upgrade.tar.gz' file" ;;
esac

UPGRADE_IMAGE_PATH="$(readlink -f "$1")"
[[ -n "$UPGRADE_IMAGE_PATH" ]] || die "unable to determine upgrade image path"

trap cleanup EXIT
UNPACK_DIR=$(mktemp -d -p "$UPDATE_DIR" -t unpack.XXXXXXX)
[[ -d "$UNPACK_DIR" ]] || die "failed to create unpack directory '$UNPACK_DIR'"
pushd "$UNPACK_DIR" &>/dev/null || die "'pushd $UNPACK_DIR' failed"

report_progress_inc 10 "Extracting upgrade image."

tar -xzf "$UPGRADE_IMAGE_PATH" ||
	die "failed to extract upgrade image '$UPGRADE_IMAGE_PATH'"

report_progress_inc 40 "Verifying format."

for file in SHA256SUMS payload.tar.gz version.info; do
	[[ -f "$file" ]] || die "image is corrupt; missing '$file' file"
done

if ! $opt_s; then
	openssl dgst -sha256 \
		-verify /var/lib/delphix-appliance/key-public.pem.upgrade.5.3 \
		-signature SHA256SUMS.sig.5.3 \
		SHA256SUMS >/dev/null ||
		die "image is corrupt; verification of 'SHA256SUMS' file," \
			"using signature 'SHA256SUMS.sig.5.3'" \
			"and key 'key-public.pem.upgrade.5.3' failed"
fi

sha256sum -c SHA256SUMS >/dev/null ||
	die "image is corrupt; checksums don't match"

tar -xzf payload.tar.gz || die "failed to extract payload.tar.gz"
rm payload.tar.gz || die "failed to remove payload.tar.gz"

#
# We need to be careful when sourcing this file, since it can conflict
# with (and clobber) functions and/or variables previously defined.
#
# shellcheck disable=SC1091
. version.info || die "sourcing version.info file failed"

[[ -n "$VERSION" ]] || die "VERSION variable is empty"
[[ -n "$MINIMUM_VERSION" ]] || die "MINIMUM_VERSION variable is empty"
[[ -n "$MINIMUM_REBOOT_OPTIONAL_VERSION" ]] ||
	die "MINIMUM_REBOOT_OPTIONAL_VERSION variable is empty"

if $opt_x; then
	sed -i \
		"s/^\(MINIMUM_REBOOT_OPTIONAL_VERSION\)=.*$/\1=$VERSION/" \
		version.info ||
		die "'sed -i ... version.info' failed"

	# shellcheck disable=SC1091
	. version.info || die "sourcing version.info file failed"
fi

popd &>/dev/null || die "'popd' failed"

$opt_f && rm -rf "${UPDATE_DIR:?}/$VERSION" >/dev/null 2>&1

[[ -d "$UPDATE_DIR/$VERSION" ]] && die "version $VERSION already exists"

mv "$UNPACK_DIR" "$UPDATE_DIR/$VERSION" ||
	die "failed to move unpacked upgrade image to $UPDATE_DIR/$VERSION"

rm -f "$UPDATE_DIR/latest" || die "failed to remove 'latest' symlink"
ln -s "$VERSION" "$UPDATE_DIR/latest" || die "failed to create 'latest' symlink"

report_progress_inc 100 "Unpacking successful."

exit 0
