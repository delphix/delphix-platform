#!/bin/bash
#
# Copyright 2018, 2019 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

UPDATE_DIR=${UPDATE_DIR:-/var/dlpx-update}

function die() {
	echo "$(basename "$0"): $*" >&2
	exit 1
}

function usage() {
	echo "$(basename "$0"): $*" >&2
	echo "Usage: $(basename "$0") [-f] [-s] [-x] <image> <tmp_dir>"
	exit 2
}

function report_progress_inc() {
	echo "Progress increment: $(date +%T:%N%z), $1, $2"
}

function cleanup() {
	[[ -d "$UNPACK_DIR" ]] && rm -rf "$UNPACK_DIR"
}

#
# This option will "force" unpack the image, which will cause the image
# currently being unpacked to overwrite any previously unpacked image of
# the same version. Otherwise, this will fail if there's already an
# unpacked image of the same version.
#
opt_f=""

#
# This option will skip the signature verification portion of this
# script. Generally this should not be used, as the signature is used to
# ensure the image hasn't been modified, but it can be useful for
# development and/or testing purposes.
#
opt_s=""

#
# This option will cause this script to modify the "version.info" file,
# setting the "MINIMUM_REBOOT_OPTIONAL_VERSION" field to be equal to the
# "VERSION" field. This way, when an upgrade is performed using this
# unpacked upgrade image, it'll result in a "not-in-place" upgrade when
# perhaps this otherwise would not have occurred; this is mostly useful
# for internal testing of the "not-in-place" upgrade code paths.
#
opt_x=""

#
# This option will just extract the image into a temporary directory. This
# will not invoke the prepare script. This split helps us in passing control
# back to java to make version checks.
#
opt_e=false

while getopts ':fsxe' c; do
	case "$c" in
	f | s | x | e) eval "opt_$c=true" ;;
	*) usage "illegal option -- $OPTARG" ;;
	esac
done
shift $((OPTIND - 1))

[[ "$EUID" -ne 0 ]] && die "must be run as root"
[[ $# -eq 0 ]] && usage "too few arguments specified"
[[ $# -gt 2 ]] && usage "too many arguments specified"

case "$1" in
*.upgrade.tar.gz) ;;
*) die "{message.upgrade.default.error}The upgrade image must be a '.upgrade.tar.gz' file" ;;
esac

UPGRADE_IMAGE_PATH="$(readlink -f "$1")"
[[ -n "$UPGRADE_IMAGE_PATH" ]] || die "{message.upgrade.default.error}Unable to determine upgrade image path"

if $opt_e; then
	UNPACK_DIR="$2"
	mkdir -p "$UNPACK_DIR"
else
	[[ -d "$UPDATE_DIR" ]] || die "{message.upgrade.default.error}$UPDATE_DIR does not exist"
	UNPACK_DIR=$(mktemp -d -p "$UPDATE_DIR" -t unpack.XXXXXXX)
fi

[[ -d "$UNPACK_DIR" ]] || die "{message.upgrade.default.error}Failed to create unpack directory '$UNPACK_DIR'"

pushd "$UNPACK_DIR" &>/dev/null || die "'pushd $UNPACK_DIR' failed"

report_progress_inc 10 "Extracting upgrade image."

tar -xzf "$UPGRADE_IMAGE_PATH" ||
	die "{message.upgrade.default.error}Failed to extract upgrade image '$UPGRADE_IMAGE_PATH'"

report_progress_inc 40 "Verifying format."

for file in SHA256SUMS prepare; do
	[[ -f "$file" ]] || die "{message.upgrade.image.corrupt}Image is corrupt; missing '$file' file"
done

if [[ -z "$opt_s" ]]; then
	openssl dgst -sha256 \
		-verify /var/lib/delphix-appliance/key-public.pem.upgrade.5.3 \
		-signature SHA256SUMS.sig.5.3 \
		SHA256SUMS >/dev/null ||
		die "{message.upgrade.image.corrupt}Image is corrupt; verification of 'SHA256SUMS' file," \
			"using signature 'SHA256SUMS.sig.5.3'" \
			"and key 'key-public.pem.upgrade.5.3' failed"
fi

sha256sum -c SHA256SUMS >/dev/null ||
	die "{message.upgrade.checksum.invalid}Image is corrupt; checksums don't match"

popd &>/dev/null || die "'popd' failed"

if $opt_e; then
	report_progress_inc 100 "Upgrade image extracted."
	exit 0
fi

trap cleanup EXIT

report_progress_inc 45 "Handoff unpack to prepare script."

"$UNPACK_DIR"/prepare ${opt_f:+"-f"} ${opt_s:+"-s"} ${opt_x:+"-x"} "$UNPACK_DIR" ||
	die "'prepare' hand-off failed"

exit 0
