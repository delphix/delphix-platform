#
# Copyright 2018 Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Configure GRUB2 to allow access over the serial console.
#
GRUB_TERMINAL="console serial"
GRUB_CMDLINE_LINUX_DEFAULT="console=tty0 console=ttyS0,38400n8"
GRUB_SERIAL_COMMAND="serial --speed=38400 --unit=0 --word=8 --parity=no --stop=1"

#
# Disable Spectre/Meltdown/Foreshadow/MDS (Microarchitectural Data Sampling)
# mitigations to increase performance.
#
GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT mitigations=off"

#
# Disable IPv6 because it is not supported by the Delphix appliance. We
# do so here, and not from systemd-sysctl, because while configuring
# net.ipv6.conf.{default,all}.disable_ipv6 works for the currently
# installed interfaces, new interfaces don't pick up that parameter.
#
GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT ipv6.disable=1"

#
# On Delphix appliance, disks should have 'noop' I/O scheduler since they
# would be under ZFS control.
#
GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT elevator=noop"

#
# Increase the amount of memory reserved for the crash kernel.
#
# Empirically, it seems we need about 512M to get it to boot so
# supplying something like "crashkernel=512M" in the cmdline
# provided by GRUB to the OS would suffice.
#
# Unfortunately, given our current kernel (v4.15 at the time of this
# writing) the system would try to allocate a contiguous chunk out
# of low memory (the first 896MBs of it to be specific). This works
# well most of the time except from the cases when KASLR places the
# running kernel in that region making it impossible for the system
# to find a contiguous 512MB chunk for the crash kernel.
#
# This behavior has been fixed in newer versions of the kernel but
# as we are stuck in the current version for now we are left with
# the following workaround: We split the 512M allocation to two
# chunks, one within the 896MB window of low memory and one in high
# memory. Using high memory for the whole reservation would be ideal
# but certain types of allocations from the crash kernel can only
# happen in low memory. As a result we are forced to split this
# chunk to a low memory and a high memory part.
#
# The tradeoff in sizing the low memory segment is the following:
# - The smaller the low memory segment, the higher the probability
#   of it finding a free contiguous block for its size in the first
#   896MB of memory and thus the probability that the crash kernel
#   will be loaded. This also allows more memory to be used in
#   userspace allocations in the crash kernel.
# - The bigger the low memory segment, the smaller the chances of
#   the crash kernel running out of kernel memory and becoming
#   unresponsive.
#
# In both extreme scenarios the worst-case is the same. The system
# becomes unresponsive either because it panicked and there was no
# crash kernel to load, or because the crash kernel did load but
# got stuck as it ran out of memory. Splitting the 512MB segment
# in the middle (256MB for each chunk) empirically seems to not
# cause any problems.
#
# Side Note:
# We have a testing/debugging use case in appliance-build where we
# load up an image on QEMU using 1GB of RAM or less. For this use
# case the system will boot normally but the crash kernel will fail
# to load, so generating crash dumps on panic is not expected to
# work for such systems.
#
# Patches in newer kernel versions relevant to this issue:
# [1] X86/kdump: move crashkernel=X to reserve under 4G by default
#     LKML: https://lkml.org/lkml/2019/4/20/229
#     Upstream commit: 9ca5c8e632ce8f144ec6d00da2dc5e16b41d593c
# [2] X86/kdump: fall back to reserve high crashkernel memory
#     LKML: https://lkml.org/lkml/2019/4/20/230
#     Upstream commit: b9ac3849af412fd3887d7652bdbabf29d2aecc16
#
GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT crashkernel=256M,high"
GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT crashkernel=256M,low"
